package com.ibm.dao.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;
import org.apache.log4j.*;



import com.ibm.domain.core.Forecast;
import com.ibm.domain.core.IBUser;


/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Transactional
@Repository("Forecast_Default_ActivityDao")
public class Forecast_Default_ActivityDao   {

	//private Log log = LogFactory.getLog(getClass());
	private static Logger log = Logger.getLogger(Forecast_Default_ActivityDao.class.getName());

	@Value("${create_Forecast.sql}")
	private String create_Forecast;
	@Value("${search_for_update_Forecast.sql}")
	private String search_for_update_Forecast;
	@Value("${update_Forecast.sql}")
	private String update_Forecast;
	@Value("${delete_Forecast.sql}")
	private String delete_Forecast;
	@Value("${get_all_Forecast.sql}")
	private String get_all_Forecast;


    @PersistenceContext
	private EntityManager entityManager;



	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform fetch operation of  Forecast noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Forecast object will return
	*@throws Exception
	*/

	public Forecast forecast_search_for_update(long id, IBUser user) throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("forecast_search_for_update Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(search_for_update_Forecast,Forecast.class)

			.setParameter("id", id);;

			ArrayList<Forecast> Forecast_list =	(ArrayList<Forecast>)result.getResultList();

			if(Forecast_list  == null){

			log.error("forecast_search_for_update Dao throws exception :" + "no Forecast found" );
			throw new Exception("no Forecast found");
			}
			log.info("Object returned from forecast_search_for_update  Dao method !");
			return (Forecast) Forecast_list.get(0);

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("forecast_search_for_update Dao throws exception : "+e.toString());

		}
		return null;


	}

	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to get list of  Forecast noun from  database
	*
	*
	*@return List of Forecast object will return
	*@throws Exception
	*/

	public ArrayList<Forecast> get_all_forecast() throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("get_all_forecast Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(get_all_Forecast,Forecast.class)

;

			ArrayList<Forecast> Forecast_list =	(ArrayList<Forecast>)result.getResultList();

			if(Forecast_list .size() < 1){

			log.error("get_all_forecast Dao throws exception :" + "no Forecast found" );
			throw new Exception("no Forecast found");
			}
			log.info("Object returned from get_all_forecast  Dao method !");
			return (ArrayList<Forecast>) Forecast_list;

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("get_all_forecast Dao throws exception : "+e.toString());

		}
		return null;


	}



	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform save operation of  Forecast noun into database
	*@param Forecast
	*@param user
	*@return Forecast object will return
	*@throws Exception
	*/

	@Transactional
	public Forecast create_forecast(Forecast Forecast, IBUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("create_forecast Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(create_Forecast)
			.setParameter("lotusseller_1", Forecast.getLotusseller_1())
			.setParameter("quarter", Forecast.getQuarter())
			.setParameter("nextsteps", Forecast.getNextsteps())
			.setParameter("oldforecasttype", Forecast.getOldforecasttype())
			.setParameter("lastupdate", Forecast.getLastupdate())
			.setParameter("unid", Forecast.getUnid())
			.setParameter("businesspartner", Forecast.getBusinesspartner())
			.setParameter("oldestsigndate", Forecast.getOldestsigndate())
			.setParameter("projdur", Forecast.getProjdur())
			.setParameter("history", Forecast.getHistory())
			.setParameter("rolesuser", Forecast.getRolesuser())
			.setParameter("peer_et", Forecast.getPeer_et())
			.setParameter("callamount", Forecast.getCallamount())
			.setParameter("estsigndate", Forecast.getEstsigndate())
			.setParameter("technology", Forecast.getTechnology())
			.setParameter("lotusseller", Forecast.getLotusseller())
			.setParameter("pipelineagedate", Forecast.getPipelineagedate())
			.setParameter("pricecaselink", Forecast.getPricecaselink())
			.setParameter("actsigndate_1", Forecast.getActsigndate_1())
			.setParameter("doclink", Forecast.getDoclink())
			.setParameter("pba_et", Forecast.getPba_et())
			.setParameter("oldprojdur", Forecast.getOldprojdur())
			.setParameter("sowcurrency", Forecast.getSowcurrency())
			.setParameter("pgtyp", Forecast.getPgtyp())
			.setParameter("client", Forecast.getClient())
			.setParameter("spif", Forecast.getSpif())
			.setParameter("territory", Forecast.getTerritory())
			.setParameter("bso_et", Forecast.getBso_et())
			.setParameter("nextstepslast", Forecast.getNextstepslast())
			.setParameter("roles", Forecast.getRoles())
			.setParameter("condeldate", Forecast.getCondeldate())
			.setParameter("engagementmanager", Forecast.getEngagementmanager())
			.setParameter("project", Forecast.getProject())
			.setParameter("keytrans", Forecast.getKeytrans())
			.setParameter("oldprjstartdate", Forecast.getOldprjstartdate())
			.setParameter("forecast", Forecast.getForecast())
			.setParameter("sowamount", Forecast.getSowamount())
			.setParameter("region", Forecast.getRegion())
			.setParameter("pa_et", Forecast.getPa_et())
			.setParameter("contactstate", Forecast.getContactstate())
			.setParameter("revenuetype", Forecast.getRevenuetype())
			.setParameter("weekp", Forecast.getWeekp())
			.setParameter("mthadjfst", Forecast.getMthadjfst())
			.setParameter("calldate", Forecast.getCalldate())
			.setParameter("practice", Forecast.getPractice())
			.setParameter("linkyesno", Forecast.getLinkyesno())
			.setParameter("avpoffering", Forecast.getAvpoffering())
			.setParameter("bdm", Forecast.getBdm())
			.setParameter("prjstartdate", Forecast.getPrjstartdate())
			.setParameter("sa", Forecast.getSa())
			.setParameter("oldsowamount", Forecast.getOldsowamount())
			.setParameter("contactphone", Forecast.getContactphone())
			.setParameter("legal_et", Forecast.getLegal_et())
			.setParameter("contactcity", Forecast.getContactcity())
			.setParameter("commentsdisplay", Forecast.getCommentsdisplay())
			.setParameter("ics_et", Forecast.getIcs_et())
			.setParameter("avpleadsource", Forecast.getAvpleadsource())
			.setParameter("sendforecastuser", Forecast.getSendforecastuser())
			.setParameter("avpsale", Forecast.getAvpsale())
			.setParameter("forecastsw", Forecast.getForecastsw())
			.setParameter("tda_et", Forecast.getTda_et())
			.setParameter("forecastview", Forecast.getForecastview())
			.setParameter("oppassessment", Forecast.getOppassessment())
			.setParameter("cancelled", Forecast.getCancelled())
			.setParameter("conexpdate", Forecast.getConexpdate())
			.setParameter("mdoc", Forecast.getMdoc())
			.setParameter("freqfly", Forecast.getFreqfly())
			.setParameter("ssr", Forecast.getSsr())
			.setParameter("strpipelineagedate", Forecast.getStrpipelineagedate())
			.setParameter("contactstreetaddress", Forecast.getContactstreetaddress())
			.setParameter("contactemail", Forecast.getContactemail())
			.setParameter("del_et", Forecast.getDel_et())
			.setParameter("sendforecastsw", Forecast.getSendforecastsw())
			.setParameter("forecasttype", Forecast.getForecasttype())
			.setParameter("salesincentive", Forecast.getSalesincentive())
			.setParameter("pm", Forecast.getPm())
			.setParameter("contactname", Forecast.getContactname())
			.setParameter("ca_et", Forecast.getCa_et())
			.setParameter("dbserver", Forecast.getDbserver())
			.setParameter("quote", Forecast.getQuote())
			.setParameter("mqtr", Forecast.getMqtr())
			.setParameter("qtr", Forecast.getQtr())
			.setParameter("mthforecast", Forecast.getMthforecast())
			.setParameter("yrmth", Forecast.getYrmth())
			.setParameter("qtradjfct", Forecast.getQtradjfct())
			.setParameter("qtrforecast", Forecast.getQtrforecast())
			.setParameter("forecastdate", Forecast.getForecastdate())
			.setParameter("product_1", Forecast.getProduct_1())
			.setParameter("product_2", Forecast.getProduct_2())
			.setParameter("nextstepsnotes", Forecast.getNextstepsnotes())
			.setParameter("aemail_1", Forecast.getAemail_1())
			.setParameter("lname_1", Forecast.getLname_1())
			.setParameter("onsitedays_2", Forecast.getOnsitedays_2())
			.setParameter("onsitedays_1", Forecast.getOnsitedays_1())
			.setParameter("avpoffering_1", Forecast.getAvpoffering_1())
			.setParameter("technology_2", Forecast.getTechnology_2())
			.setParameter("technology_1", Forecast.getTechnology_1())
			.setParameter("avpoffering_2", Forecast.getAvpoffering_2())
			.setParameter("contacticn", Forecast.getContacticn())
			.setParameter("products", Forecast.getProducts())
			.setParameter("cellnumber_1", Forecast.getCellnumber_1())
			.setParameter("contactentnumber", Forecast.getContactentnumber())
			.setParameter("acomments_1", Forecast.getAcomments_1())
			.setParameter("percentage_2", Forecast.getPercentage_2())
			.setParameter("percentage_1", Forecast.getPercentage_1())
			.setParameter("namedcallers_2", Forecast.getNamedcallers_2())
			.setParameter("namedcallers_1", Forecast.getNamedcallers_1())
			.setParameter("arole_1", Forecast.getArole_1())
			.setParameter("fname_1", Forecast.getFname_1())
			.setParameter("practice_1", Forecast.getPractice_1())
			.setParameter("bluepages_1", Forecast.getBluepages_1())
			.setParameter("practice_2", Forecast.getPractice_2())
			.setParameter("contactpanumber", Forecast.getContactpanumber())
			.setParameter("sowamount_1", Forecast.getSowamount_1())
			.setParameter("productrelease", Forecast.getProductrelease())
			.setParameter("aemail_2", Forecast.getAemail_2())
			.setParameter("aemail_3", Forecast.getAemail_3())
			.setParameter("lname_3", Forecast.getLname_3())
			.setParameter("lname_2", Forecast.getLname_2())
			.setParameter("arole_3", Forecast.getArole_3())
			.setParameter("arole_2", Forecast.getArole_2())
			.setParameter("fname_2", Forecast.getFname_2())
			.setParameter("fname_3", Forecast.getFname_3())
			.setParameter("commentaction", Forecast.getCommentaction())
			.setParameter("productsver", Forecast.getProductsver())
			.setParameter("contactssexpdate", Forecast.getContactssexpdate())
			.setParameter("contactssspend", Forecast.getContactssspend())
			.setParameter("eosdate", Forecast.getEosdate())
			.setParameter("bluepages_5", Forecast.getBluepages_5())
			.setParameter("bluepages_6", Forecast.getBluepages_6())
			.setParameter("bluepages_3", Forecast.getBluepages_3())
			.setParameter("bluepages_4", Forecast.getBluepages_4())
			.setParameter("bluepages_2", Forecast.getBluepages_2())
			.setParameter("reupgradeplan", Forecast.getReupgradeplan())
			.setParameter("aemail_6", Forecast.getAemail_6())
			.setParameter("aemail_4", Forecast.getAemail_4())
			.setParameter("aemail_5", Forecast.getAemail_5())
			.setParameter("cellnumber_4", Forecast.getCellnumber_4())
			.setParameter("cellnumber_5", Forecast.getCellnumber_5())
			.setParameter("cellnumber_6", Forecast.getCellnumber_6())
			.setParameter("cellnumber_2", Forecast.getCellnumber_2())
			.setParameter("cellnumber_3", Forecast.getCellnumber_3())
			.setParameter("fname_6", Forecast.getFname_6())
			.setParameter("arole_5", Forecast.getArole_5())
			.setParameter("arole_4", Forecast.getArole_4())
			.setParameter("fname_4", Forecast.getFname_4())
			.setParameter("fname_5", Forecast.getFname_5())
			.setParameter("arole_6", Forecast.getArole_6())
			.setParameter("cemail_1", Forecast.getCemail_1())
			.setParameter("cfirst_1", Forecast.getCfirst_1())
			.setParameter("crole_1", Forecast.getCrole_1())
			.setParameter("ccell_1", Forecast.getCcell_1())
			.setParameter("acomments_2", Forecast.getAcomments_2())
			.setParameter("contactcountry", Forecast.getContactcountry())
			.setParameter("cemail_2", Forecast.getCemail_2())
			.setParameter("cfirst_2", Forecast.getCfirst_2())
			.setParameter("clast_1", Forecast.getClast_1())
			.setParameter("acomments_4", Forecast.getAcomments_4())
			.setParameter("acomments_3", Forecast.getAcomments_3())
			.setParameter("nextstepdate", Forecast.getNextstepdate())
			.setParameter("clast_2", Forecast.getClast_2())
			.setParameter("crole_2", Forecast.getCrole_2())
			.setParameter("ccell_2", Forecast.getCcell_2())
			.setParameter("acomments_5", Forecast.getAcomments_5())
			.setParameter("cpostal_2", Forecast.getCpostal_2())
			.setParameter("cemail_3", Forecast.getCemail_3())
			.setParameter("cfirst_3", Forecast.getCfirst_3())
			.setParameter("clast_3", Forecast.getClast_3())
			.setParameter("crole_3", Forecast.getCrole_3())
			.setParameter("ccell_3", Forecast.getCcell_3())
			.setParameter("cemail_5", Forecast.getCemail_5())
			.setParameter("cemail_4", Forecast.getCemail_4())
			.setParameter("clast_4", Forecast.getClast_4())
			.setParameter("clast_5", Forecast.getClast_5())
			.setParameter("cfirst_4", Forecast.getCfirst_4())
			.setParameter("cfirst_5", Forecast.getCfirst_5())
			.setParameter("crole_5", Forecast.getCrole_5())
			.setParameter("crole_4", Forecast.getCrole_4())
			.setParameter("nextstepsnotesadd", Forecast.getNextstepsnotesadd())
			.setParameter("ssr_1", Forecast.getSsr_1())
			.setParameter("cemail_7", Forecast.getCemail_7())
			.setParameter("cemail_6", Forecast.getCemail_6())
			.setParameter("cfirst_6", Forecast.getCfirst_6())
			.setParameter("cfirst_7", Forecast.getCfirst_7())
			.setParameter("clast_6", Forecast.getClast_6())
			.setParameter("clast_7", Forecast.getClast_7())
			.setParameter("ccell_7", Forecast.getCcell_7())
			.setParameter("contactpostalcode", Forecast.getContactpostalcode())
			.setParameter("aemail_7", Forecast.getAemail_7())
			.setParameter("cellnumber_7", Forecast.getCellnumber_7())
			.setParameter("acomments_7", Forecast.getAcomments_7())
			.setParameter("acomments_6", Forecast.getAcomments_6())
			.setParameter("bluepages_7", Forecast.getBluepages_7())
			.setParameter("fname_7", Forecast.getFname_7())
			.setParameter("ccity_1", Forecast.getCcity_1())
			.setParameter("cpostal_1", Forecast.getCpostal_1())
			.setParameter("cstate_1", Forecast.getCstate_1())
			.setParameter("clocation_1", Forecast.getClocation_1())
			.setParameter("created_by", user == null ? 0:user.getId())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			int insertedId = query.executeUpdate();
					String lastIndex="select last_insert_id()";
					Query sql = entityManager.createNativeQuery(lastIndex);
					BigInteger new_id = (BigInteger) sql.getSingleResult();
					Forecast.setId(new_id.longValue());
					System.out.println("create data---"+insertedId);

			log.info("Object returned from create_forecast  Dao method !");

			return Forecast;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (create_forecast) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform update operation of  Forecast noun into database
	*@param Forecast
	*@param user
	*@return the_Forecast object will return
	*@throws Exception
	*/

	@Transactional
	public Forecast update_forecast(Forecast Forecast, IBUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("update_forecast Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(update_Forecast)
			.setParameter("id", Forecast.getId())
			.setParameter("lotusseller_1", Forecast.getLotusseller_1())
			.setParameter("quarter", Forecast.getQuarter())
			.setParameter("nextsteps", Forecast.getNextsteps())
			.setParameter("oldforecasttype", Forecast.getOldforecasttype())
			.setParameter("lastupdate", Forecast.getLastupdate())
			.setParameter("unid", Forecast.getUnid())
			.setParameter("businesspartner", Forecast.getBusinesspartner())
			.setParameter("oldestsigndate", Forecast.getOldestsigndate())
			.setParameter("projdur", Forecast.getProjdur())
			.setParameter("history", Forecast.getHistory())
			.setParameter("rolesuser", Forecast.getRolesuser())
			.setParameter("peer_et", Forecast.getPeer_et())
			.setParameter("callamount", Forecast.getCallamount())
			.setParameter("estsigndate", Forecast.getEstsigndate())
			.setParameter("technology", Forecast.getTechnology())
			.setParameter("lotusseller", Forecast.getLotusseller())
			.setParameter("pipelineagedate", Forecast.getPipelineagedate())
			.setParameter("pricecaselink", Forecast.getPricecaselink())
			.setParameter("actsigndate_1", Forecast.getActsigndate_1())
			.setParameter("doclink", Forecast.getDoclink())
			.setParameter("pba_et", Forecast.getPba_et())
			.setParameter("oldprojdur", Forecast.getOldprojdur())
			.setParameter("sowcurrency", Forecast.getSowcurrency())
			.setParameter("pgtyp", Forecast.getPgtyp())
			.setParameter("client", Forecast.getClient())
			.setParameter("spif", Forecast.getSpif())
			.setParameter("territory", Forecast.getTerritory())
			.setParameter("bso_et", Forecast.getBso_et())
			.setParameter("nextstepslast", Forecast.getNextstepslast())
			.setParameter("roles", Forecast.getRoles())
			.setParameter("condeldate", Forecast.getCondeldate())
			.setParameter("engagementmanager", Forecast.getEngagementmanager())
			.setParameter("project", Forecast.getProject())
			.setParameter("keytrans", Forecast.getKeytrans())
			.setParameter("oldprjstartdate", Forecast.getOldprjstartdate())
			.setParameter("forecast", Forecast.getForecast())
			.setParameter("sowamount", Forecast.getSowamount())
			.setParameter("region", Forecast.getRegion())
			.setParameter("pa_et", Forecast.getPa_et())
			.setParameter("contactstate", Forecast.getContactstate())
			.setParameter("revenuetype", Forecast.getRevenuetype())
			.setParameter("weekp", Forecast.getWeekp())
			.setParameter("mthadjfst", Forecast.getMthadjfst())
			.setParameter("calldate", Forecast.getCalldate())
			.setParameter("practice", Forecast.getPractice())
			.setParameter("linkyesno", Forecast.getLinkyesno())
			.setParameter("avpoffering", Forecast.getAvpoffering())
			.setParameter("bdm", Forecast.getBdm())
			.setParameter("prjstartdate", Forecast.getPrjstartdate())
			.setParameter("sa", Forecast.getSa())
			.setParameter("oldsowamount", Forecast.getOldsowamount())
			.setParameter("contactphone", Forecast.getContactphone())
			.setParameter("legal_et", Forecast.getLegal_et())
			.setParameter("contactcity", Forecast.getContactcity())
			.setParameter("commentsdisplay", Forecast.getCommentsdisplay())
			.setParameter("ics_et", Forecast.getIcs_et())
			.setParameter("avpleadsource", Forecast.getAvpleadsource())
			.setParameter("sendforecastuser", Forecast.getSendforecastuser())
			.setParameter("avpsale", Forecast.getAvpsale())
			.setParameter("forecastsw", Forecast.getForecastsw())
			.setParameter("tda_et", Forecast.getTda_et())
			.setParameter("forecastview", Forecast.getForecastview())
			.setParameter("oppassessment", Forecast.getOppassessment())
			.setParameter("cancelled", Forecast.getCancelled())
			.setParameter("conexpdate", Forecast.getConexpdate())
			.setParameter("mdoc", Forecast.getMdoc())
			.setParameter("freqfly", Forecast.getFreqfly())
			.setParameter("ssr", Forecast.getSsr())
			.setParameter("strpipelineagedate", Forecast.getStrpipelineagedate())
			.setParameter("contactstreetaddress", Forecast.getContactstreetaddress())
			.setParameter("contactemail", Forecast.getContactemail())
			.setParameter("del_et", Forecast.getDel_et())
			.setParameter("sendforecastsw", Forecast.getSendforecastsw())
			.setParameter("forecasttype", Forecast.getForecasttype())
			.setParameter("salesincentive", Forecast.getSalesincentive())
			.setParameter("pm", Forecast.getPm())
			.setParameter("contactname", Forecast.getContactname())
			.setParameter("ca_et", Forecast.getCa_et())
			.setParameter("dbserver", Forecast.getDbserver())
			.setParameter("quote", Forecast.getQuote())
			.setParameter("mqtr", Forecast.getMqtr())
			.setParameter("qtr", Forecast.getQtr())
			.setParameter("mthforecast", Forecast.getMthforecast())
			.setParameter("yrmth", Forecast.getYrmth())
			.setParameter("qtradjfct", Forecast.getQtradjfct())
			.setParameter("qtrforecast", Forecast.getQtrforecast())
			.setParameter("forecastdate", Forecast.getForecastdate())
			.setParameter("product_1", Forecast.getProduct_1())
			.setParameter("product_2", Forecast.getProduct_2())
			.setParameter("nextstepsnotes", Forecast.getNextstepsnotes())
			.setParameter("aemail_1", Forecast.getAemail_1())
			.setParameter("lname_1", Forecast.getLname_1())
			.setParameter("onsitedays_2", Forecast.getOnsitedays_2())
			.setParameter("onsitedays_1", Forecast.getOnsitedays_1())
			.setParameter("avpoffering_1", Forecast.getAvpoffering_1())
			.setParameter("technology_2", Forecast.getTechnology_2())
			.setParameter("technology_1", Forecast.getTechnology_1())
			.setParameter("avpoffering_2", Forecast.getAvpoffering_2())
			.setParameter("contacticn", Forecast.getContacticn())
			.setParameter("products", Forecast.getProducts())
			.setParameter("cellnumber_1", Forecast.getCellnumber_1())
			.setParameter("contactentnumber", Forecast.getContactentnumber())
			.setParameter("acomments_1", Forecast.getAcomments_1())
			.setParameter("percentage_2", Forecast.getPercentage_2())
			.setParameter("percentage_1", Forecast.getPercentage_1())
			.setParameter("namedcallers_2", Forecast.getNamedcallers_2())
			.setParameter("namedcallers_1", Forecast.getNamedcallers_1())
			.setParameter("arole_1", Forecast.getArole_1())
			.setParameter("fname_1", Forecast.getFname_1())
			.setParameter("practice_1", Forecast.getPractice_1())
			.setParameter("bluepages_1", Forecast.getBluepages_1())
			.setParameter("practice_2", Forecast.getPractice_2())
			.setParameter("contactpanumber", Forecast.getContactpanumber())
			.setParameter("sowamount_1", Forecast.getSowamount_1())
			.setParameter("productrelease", Forecast.getProductrelease())
			.setParameter("aemail_2", Forecast.getAemail_2())
			.setParameter("aemail_3", Forecast.getAemail_3())
			.setParameter("lname_3", Forecast.getLname_3())
			.setParameter("lname_2", Forecast.getLname_2())
			.setParameter("arole_3", Forecast.getArole_3())
			.setParameter("arole_2", Forecast.getArole_2())
			.setParameter("fname_2", Forecast.getFname_2())
			.setParameter("fname_3", Forecast.getFname_3())
			.setParameter("commentaction", Forecast.getCommentaction())
			.setParameter("productsver", Forecast.getProductsver())
			.setParameter("contactssexpdate", Forecast.getContactssexpdate())
			.setParameter("contactssspend", Forecast.getContactssspend())
			.setParameter("eosdate", Forecast.getEosdate())
			.setParameter("bluepages_5", Forecast.getBluepages_5())
			.setParameter("bluepages_6", Forecast.getBluepages_6())
			.setParameter("bluepages_3", Forecast.getBluepages_3())
			.setParameter("bluepages_4", Forecast.getBluepages_4())
			.setParameter("bluepages_2", Forecast.getBluepages_2())
			.setParameter("reupgradeplan", Forecast.getReupgradeplan())
			.setParameter("aemail_6", Forecast.getAemail_6())
			.setParameter("aemail_4", Forecast.getAemail_4())
			.setParameter("aemail_5", Forecast.getAemail_5())
			.setParameter("cellnumber_4", Forecast.getCellnumber_4())
			.setParameter("cellnumber_5", Forecast.getCellnumber_5())
			.setParameter("cellnumber_6", Forecast.getCellnumber_6())
			.setParameter("cellnumber_2", Forecast.getCellnumber_2())
			.setParameter("cellnumber_3", Forecast.getCellnumber_3())
			.setParameter("fname_6", Forecast.getFname_6())
			.setParameter("arole_5", Forecast.getArole_5())
			.setParameter("arole_4", Forecast.getArole_4())
			.setParameter("fname_4", Forecast.getFname_4())
			.setParameter("fname_5", Forecast.getFname_5())
			.setParameter("arole_6", Forecast.getArole_6())
			.setParameter("cemail_1", Forecast.getCemail_1())
			.setParameter("cfirst_1", Forecast.getCfirst_1())
			.setParameter("crole_1", Forecast.getCrole_1())
			.setParameter("ccell_1", Forecast.getCcell_1())
			.setParameter("acomments_2", Forecast.getAcomments_2())
			.setParameter("contactcountry", Forecast.getContactcountry())
			.setParameter("cemail_2", Forecast.getCemail_2())
			.setParameter("cfirst_2", Forecast.getCfirst_2())
			.setParameter("clast_1", Forecast.getClast_1())
			.setParameter("acomments_4", Forecast.getAcomments_4())
			.setParameter("acomments_3", Forecast.getAcomments_3())
			.setParameter("nextstepdate", Forecast.getNextstepdate())
			.setParameter("clast_2", Forecast.getClast_2())
			.setParameter("crole_2", Forecast.getCrole_2())
			.setParameter("ccell_2", Forecast.getCcell_2())
			.setParameter("acomments_5", Forecast.getAcomments_5())
			.setParameter("cpostal_2", Forecast.getCpostal_2())
			.setParameter("cemail_3", Forecast.getCemail_3())
			.setParameter("cfirst_3", Forecast.getCfirst_3())
			.setParameter("clast_3", Forecast.getClast_3())
			.setParameter("crole_3", Forecast.getCrole_3())
			.setParameter("ccell_3", Forecast.getCcell_3())
			.setParameter("cemail_5", Forecast.getCemail_5())
			.setParameter("cemail_4", Forecast.getCemail_4())
			.setParameter("clast_4", Forecast.getClast_4())
			.setParameter("clast_5", Forecast.getClast_5())
			.setParameter("cfirst_4", Forecast.getCfirst_4())
			.setParameter("cfirst_5", Forecast.getCfirst_5())
			.setParameter("crole_5", Forecast.getCrole_5())
			.setParameter("crole_4", Forecast.getCrole_4())
			.setParameter("nextstepsnotesadd", Forecast.getNextstepsnotesadd())
			.setParameter("ssr_1", Forecast.getSsr_1())
			.setParameter("cemail_7", Forecast.getCemail_7())
			.setParameter("cemail_6", Forecast.getCemail_6())
			.setParameter("cfirst_6", Forecast.getCfirst_6())
			.setParameter("cfirst_7", Forecast.getCfirst_7())
			.setParameter("clast_6", Forecast.getClast_6())
			.setParameter("clast_7", Forecast.getClast_7())
			.setParameter("ccell_7", Forecast.getCcell_7())
			.setParameter("contactpostalcode", Forecast.getContactpostalcode())
			.setParameter("aemail_7", Forecast.getAemail_7())
			.setParameter("cellnumber_7", Forecast.getCellnumber_7())
			.setParameter("acomments_7", Forecast.getAcomments_7())
			.setParameter("acomments_6", Forecast.getAcomments_6())
			.setParameter("bluepages_7", Forecast.getBluepages_7())
			.setParameter("fname_7", Forecast.getFname_7())
			.setParameter("ccity_1", Forecast.getCcity_1())
			.setParameter("cpostal_1", Forecast.getCpostal_1())
			.setParameter("cstate_1", Forecast.getCstate_1())
			.setParameter("clocation_1", Forecast.getClocation_1())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			query.executeUpdate();

			log.info("Object returned from update_forecast  Dao method !");

			return Forecast;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (update_forecast) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform delete operation of  Forecast noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Forecast id deleted based on id
	*@throws Exception
	*/

	@Transactional
	public String  delete_forecast(long id, IBUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("delete_forecast Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(delete_Forecast)
			.setParameter("id", id);

			query.executeUpdate();

			log.info("Object returned from delete_forecast  Dao method !");

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (delete_forecast) throws Exception : "+e.toString());

		}
		return null;



	}



}