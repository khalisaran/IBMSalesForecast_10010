package com.ibm.dao.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;
import org.apache.log4j.*;



import com.ibm.domain.core.Note;
import com.ibm.domain.core.IBUser;


/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Transactional
@Repository("Note_Default_ActivityDao")
public class Note_Default_ActivityDao   {

	//private Log log = LogFactory.getLog(getClass());
	private static Logger log = Logger.getLogger(Note_Default_ActivityDao.class.getName());

	@Value("${create_Note.sql}")
	private String create_Note;
	@Value("${search_for_update_Note.sql}")
	private String search_for_update_Note;
	@Value("${update_Note.sql}")
	private String update_Note;
	@Value("${delete_Note.sql}")
	private String delete_Note;
	@Value("${get_all_Note.sql}")
	private String get_all_Note;


    @PersistenceContext
	private EntityManager entityManager;



	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform fetch operation of  Note noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Note object will return
	*@throws Exception
	*/

	public Note note_search_for_update(long id, IBUser user) throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("note_search_for_update Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(search_for_update_Note,Note.class)

			.setParameter("id", id);;

			ArrayList<Note> Note_list =	(ArrayList<Note>)result.getResultList();

			if(Note_list  == null){

			log.error("note_search_for_update Dao throws exception :" + "no Note found" );
			throw new Exception("no Note found");
			}
			log.info("Object returned from note_search_for_update  Dao method !");
			return (Note) Note_list.get(0);

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("note_search_for_update Dao throws exception : "+e.toString());

		}
		return null;


	}

	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to get list of  Note noun from  database
	*
	*
	*@return List of Note object will return
	*@throws Exception
	*/

	public ArrayList<Note> get_all_note() throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("get_all_note Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(get_all_Note,Note.class)

;

			ArrayList<Note> Note_list =	(ArrayList<Note>)result.getResultList();

			if(Note_list .size() < 1){

			log.error("get_all_note Dao throws exception :" + "no Note found" );
			throw new Exception("no Note found");
			}
			log.info("Object returned from get_all_note  Dao method !");
			return (ArrayList<Note>) Note_list;

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("get_all_note Dao throws exception : "+e.toString());

		}
		return null;


	}



	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform save operation of  Note noun into database
	*@param Note
	*@param user
	*@return Note object will return
	*@throws Exception
	*/

	@Transactional
	public Note create_note(Note Note, IBUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("create_note Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(create_Note)
			.setParameter("lotusseller_1", Note.getLotusseller_1())
			.setParameter("nextsteps", Note.getNextsteps())
			.setParameter("lastupdate", Note.getLastupdate())
			.setParameter("forecastunid", Note.getForecastunid())
			.setParameter("unid", Note.getUnid())
			.setParameter("dspnotepriority", Note.getDspnotepriority())
			.setParameter("projdur", Note.getProjdur())
			.setParameter("createdate", Note.getCreatedate())
			.setParameter("pidstatus", Note.getPidstatus())
			.setParameter("lotusseller", Note.getLotusseller())
			.setParameter("dspheader", Note.getDspheader())
			.setParameter("client", Note.getClient())
			.setParameter("status", Note.getStatus())
			.setParameter("territory", Note.getTerritory())
			.setParameter("notepriority", Note.getNotepriority())
			.setParameter("nextstepslast", Note.getNextstepslast())
			.setParameter("engagementmanager", Note.getEngagementmanager())
			.setParameter("actionduedate", Note.getActionduedate())
			.setParameter("project", Note.getProject())
			.setParameter("br5just", Note.getBr5just())
			.setParameter("author", Note.getAuthor())
			.setParameter("region", Note.getRegion())
			.setParameter("epdesign", Note.getEpdesign())
			.setParameter("contactstate", Note.getContactstate())
			.setParameter("pricetype", Note.getPricetype())
			.setParameter("dspcitystatezip", Note.getDspcitystatezip())
			.setParameter("epplan", Note.getEpplan())
			.setParameter("privateyn", Note.getPrivateyn())
			.setParameter("bdm", Note.getBdm())
			.setParameter("epquestionnaire", Note.getEpquestionnaire())
			.setParameter("actionwho", Note.getActionwho())
			.setParameter("racompleteyn", Note.getRacompleteyn())
			.setParameter("prjstartdate", Note.getPrjstartdate())
			.setParameter("contactphone", Note.getContactphone())
			.setParameter("elafundedyn", Note.getElafundedyn())
			.setParameter("dspprivateyn", Note.getDspprivateyn())
			.setParameter("recentlogevent", Note.getRecentlogevent())
			.setParameter("auth", Note.getAuth())
			.setParameter("dspcitystatezip_1", Note.getDspcitystatezip_1())
			.setParameter("speccustreqs", Note.getSpeccustreqs())
			.setParameter("contactcity", Note.getContactcity())
			.setParameter("logevents", Note.getLogevents())
			.setParameter("eppricecase", Note.getEppricecase())
			.setParameter("dsptype", Note.getDsptype())
			.setParameter("projname", Note.getProjname())
			.setParameter("epproposal", Note.getEpproposal())
			.setParameter("componentscomplete", Note.getComponentscomplete())
			.setParameter("eppresentation", Note.getEppresentation())
			.setParameter("sourcespid", Note.getSourcespid())
			.setParameter("custname", Note.getCustname())
			.setParameter("conexpdate", Note.getConexpdate())
			.setParameter("type", Note.getType())
			.setParameter("rescount", Note.getRescount())
			.setParameter("br5yn", Note.getBr5yn())
			.setParameter("ssr", Note.getSsr())
			.setParameter("scope", Note.getScope())
			.setParameter("contactstreetaddress", Note.getContactstreetaddress())
			.setParameter("intlheader", Note.getIntlheader())
			.setParameter("subject", Note.getSubject())
			.setParameter("contractreqbydate", Note.getContractreqbydate())
			.setParameter("summary", Note.getSummary())
			.setParameter("contactemail", Note.getContactemail())
			.setParameter("notedocid", Note.getNotedocid())
			.setParameter("racompletedby", Note.getRacompletedby())
			.setParameter("complist", Note.getComplist())
			.setParameter("contactname", Note.getContactname())
			.setParameter("br1yn", Note.getBr1yn())
			.setParameter("created_by", user == null ? 0:user.getId())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			int insertedId = query.executeUpdate();
					String lastIndex="select last_insert_id()";
					Query sql = entityManager.createNativeQuery(lastIndex);
					BigInteger new_id = (BigInteger) sql.getSingleResult();
					Note.setId(new_id.longValue());
					System.out.println("create data---"+insertedId);

			log.info("Object returned from create_note  Dao method !");

			return Note;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (create_note) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform update operation of  Note noun into database
	*@param Note
	*@param user
	*@return the_Note object will return
	*@throws Exception
	*/

	@Transactional
	public Note update_note(Note Note, IBUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("update_note Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(update_Note)
			.setParameter("id", Note.getId())
			.setParameter("lotusseller_1", Note.getLotusseller_1())
			.setParameter("nextsteps", Note.getNextsteps())
			.setParameter("lastupdate", Note.getLastupdate())
			.setParameter("forecastunid", Note.getForecastunid())
			.setParameter("unid", Note.getUnid())
			.setParameter("dspnotepriority", Note.getDspnotepriority())
			.setParameter("projdur", Note.getProjdur())
			.setParameter("createdate", Note.getCreatedate())
			.setParameter("pidstatus", Note.getPidstatus())
			.setParameter("lotusseller", Note.getLotusseller())
			.setParameter("dspheader", Note.getDspheader())
			.setParameter("client", Note.getClient())
			.setParameter("status", Note.getStatus())
			.setParameter("territory", Note.getTerritory())
			.setParameter("notepriority", Note.getNotepriority())
			.setParameter("nextstepslast", Note.getNextstepslast())
			.setParameter("engagementmanager", Note.getEngagementmanager())
			.setParameter("actionduedate", Note.getActionduedate())
			.setParameter("project", Note.getProject())
			.setParameter("br5just", Note.getBr5just())
			.setParameter("author", Note.getAuthor())
			.setParameter("region", Note.getRegion())
			.setParameter("epdesign", Note.getEpdesign())
			.setParameter("contactstate", Note.getContactstate())
			.setParameter("pricetype", Note.getPricetype())
			.setParameter("dspcitystatezip", Note.getDspcitystatezip())
			.setParameter("epplan", Note.getEpplan())
			.setParameter("privateyn", Note.getPrivateyn())
			.setParameter("bdm", Note.getBdm())
			.setParameter("epquestionnaire", Note.getEpquestionnaire())
			.setParameter("actionwho", Note.getActionwho())
			.setParameter("racompleteyn", Note.getRacompleteyn())
			.setParameter("prjstartdate", Note.getPrjstartdate())
			.setParameter("contactphone", Note.getContactphone())
			.setParameter("elafundedyn", Note.getElafundedyn())
			.setParameter("dspprivateyn", Note.getDspprivateyn())
			.setParameter("recentlogevent", Note.getRecentlogevent())
			.setParameter("auth", Note.getAuth())
			.setParameter("dspcitystatezip_1", Note.getDspcitystatezip_1())
			.setParameter("speccustreqs", Note.getSpeccustreqs())
			.setParameter("contactcity", Note.getContactcity())
			.setParameter("logevents", Note.getLogevents())
			.setParameter("eppricecase", Note.getEppricecase())
			.setParameter("dsptype", Note.getDsptype())
			.setParameter("projname", Note.getProjname())
			.setParameter("epproposal", Note.getEpproposal())
			.setParameter("componentscomplete", Note.getComponentscomplete())
			.setParameter("eppresentation", Note.getEppresentation())
			.setParameter("sourcespid", Note.getSourcespid())
			.setParameter("custname", Note.getCustname())
			.setParameter("conexpdate", Note.getConexpdate())
			.setParameter("type", Note.getType())
			.setParameter("rescount", Note.getRescount())
			.setParameter("br5yn", Note.getBr5yn())
			.setParameter("ssr", Note.getSsr())
			.setParameter("scope", Note.getScope())
			.setParameter("contactstreetaddress", Note.getContactstreetaddress())
			.setParameter("intlheader", Note.getIntlheader())
			.setParameter("subject", Note.getSubject())
			.setParameter("contractreqbydate", Note.getContractreqbydate())
			.setParameter("summary", Note.getSummary())
			.setParameter("contactemail", Note.getContactemail())
			.setParameter("notedocid", Note.getNotedocid())
			.setParameter("racompletedby", Note.getRacompletedby())
			.setParameter("complist", Note.getComplist())
			.setParameter("contactname", Note.getContactname())
			.setParameter("br1yn", Note.getBr1yn())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			query.executeUpdate();

			log.info("Object returned from update_note  Dao method !");

			return Note;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (update_note) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform delete operation of  Note noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Note id deleted based on id
	*@throws Exception
	*/

	@Transactional
	public String  delete_note(long id, IBUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("delete_note Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(delete_Note)
			.setParameter("id", id);

			query.executeUpdate();

			log.info("Object returned from delete_note  Dao method !");

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (delete_note) throws Exception : "+e.toString());

		}
		return null;



	}



}