package com.ibm.dao.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;
import org.apache.log4j.*;



import com.ibm.domain.core.Probability;
import com.ibm.domain.core.IBUser;


/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Transactional
@Repository("Probability_Default_ActivityDao")
public class Probability_Default_ActivityDao   {

	//private Log log = LogFactory.getLog(getClass());
	private static Logger log = Logger.getLogger(Probability_Default_ActivityDao.class.getName());

	@Value("${create_Probability.sql}")
	private String create_Probability;
	@Value("${search_for_update_Probability.sql}")
	private String search_for_update_Probability;
	@Value("${update_Probability.sql}")
	private String update_Probability;
	@Value("${delete_Probability.sql}")
	private String delete_Probability;
	@Value("${get_all_Probability.sql}")
	private String get_all_Probability;


    @PersistenceContext
	private EntityManager entityManager;



	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform fetch operation of  Probability noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Probability object will return
	*@throws Exception
	*/

	public Probability probability_search_for_update(long id, IBUser user) throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("probability_search_for_update Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(search_for_update_Probability,Probability.class)

			.setParameter("id", id);;

			ArrayList<Probability> Probability_list =	(ArrayList<Probability>)result.getResultList();

			if(Probability_list  == null){

			log.error("probability_search_for_update Dao throws exception :" + "no Probability found" );
			throw new Exception("no Probability found");
			}
			log.info("Object returned from probability_search_for_update  Dao method !");
			return (Probability) Probability_list.get(0);

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("probability_search_for_update Dao throws exception : "+e.toString());

		}
		return null;


	}

	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to get list of  Probability noun from  database
	*
	*
	*@return List of Probability object will return
	*@throws Exception
	*/

	public ArrayList<Probability> get_all_probability() throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("get_all_probability Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(get_all_Probability,Probability.class)

;

			ArrayList<Probability> Probability_list =	(ArrayList<Probability>)result.getResultList();

			if(Probability_list .size() < 1){

			log.error("get_all_probability Dao throws exception :" + "no Probability found" );
			throw new Exception("no Probability found");
			}
			log.info("Object returned from get_all_probability  Dao method !");
			return (ArrayList<Probability>) Probability_list;

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("get_all_probability Dao throws exception : "+e.toString());

		}
		return null;


	}



	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform save operation of  Probability noun into database
	*@param Probability
	*@param user
	*@return Probability object will return
	*@throws Exception
	*/

	@Transactional
	public Probability create_probability(Probability Probability, IBUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("create_probability Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(create_Probability)
			.setParameter("probability", Probability.getProbability())
			.setParameter("description", Probability.getDescription().isEmpty() ? null:Probability.getDescription())
			.setParameter("created_by", user == null ? 0:user.getId())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			int insertedId = query.executeUpdate();
					String lastIndex="select last_insert_id()";
					Query sql = entityManager.createNativeQuery(lastIndex);
					BigInteger new_id = (BigInteger) sql.getSingleResult();
					Probability.setId(new_id.longValue());
					System.out.println("create data---"+insertedId);

			log.info("Object returned from create_probability  Dao method !");

			return Probability;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (create_probability) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform update operation of  Probability noun into database
	*@param Probability
	*@param user
	*@return the_Probability object will return
	*@throws Exception
	*/

	@Transactional
	public Probability update_probability(Probability Probability, IBUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("update_probability Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(update_Probability)
			.setParameter("id", Probability.getId())
			.setParameter("probability", Probability.getProbability())
			.setParameter("description", Probability.getDescription())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			query.executeUpdate();

			log.info("Object returned from update_probability  Dao method !");

			return Probability;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (update_probability) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform delete operation of  Probability noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Probability id deleted based on id
	*@throws Exception
	*/

	@Transactional
	public String  delete_probability(long id, IBUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("delete_probability Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(delete_Probability)
			.setParameter("id", id);

			query.executeUpdate();

			log.info("Object returned from delete_probability  Dao method !");

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (delete_probability) throws Exception : "+e.toString());

		}
		return null;



	}



}