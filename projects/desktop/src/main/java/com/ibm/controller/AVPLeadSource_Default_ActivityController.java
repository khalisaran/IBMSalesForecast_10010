package com.ibm.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.ibm.domain.core.AVPLeadSource;

import com.ibm.config.IBMSalesForecastSwaggerUIConstants;

import com.ibm.service.AVPLeadSource_Default_ActivityService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/AVPLeadSource_Default_Activity", description = "AVPLeadSource_Default_Activity of AVPLeadSource_Default_Activity",produces = "application/json")
@CrossOrigin
@Controller("AVPLeadSource_Default_ActivityController")
@RequestMapping("/AVPLeadSource_Default_Activity")
public class AVPLeadSource_Default_ActivityController  extends IBBaseController implements IBMSalesForecastSwaggerUIConstants {

private static Logger log = Logger.getLogger(AVPLeadSource_Default_ActivityController.class.getName());

	private AVPLeadSource_Default_ActivityService AVPLeadSource_Default_Activity_service;


	public AVPLeadSource_Default_ActivityService get_AVPLeadSource_Default_Activity_service() {
		return AVPLeadSource_Default_Activity_service;
	}


	@Resource(name="AVPLeadSource_Default_ActivityService")
	public void set_AVPLeadSource_Default_Activity_service(AVPLeadSource_Default_ActivityService AVPLeadSource_Default_Activity_service) {
		this.AVPLeadSource_Default_Activity_service = AVPLeadSource_Default_Activity_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  AVPLeadSource noun into database
	* @param the_AVPLeadSource
	*@return AVPLeadSource object will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_AVPLeadSource", httpMethod = "POST",notes = "creates a noun of AVPLeadSource",response = AVPLeadSource.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_AVPLeadSource" ,headers="Accept=application/json")
    @ResponseBody
	public AVPLeadSource create_AVPLeadSource(@RequestBody AVPLeadSource the_AVPLeadSource) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_AVPLeadSource controller started operation!");

		AVPLeadSource a_AVPLeadSource;

		a_AVPLeadSource = AVPLeadSource_Default_Activity_service.create_avpleadsource(the_AVPLeadSource, super.getUser());

		log.info("Object returned from create_AVPLeadSource method !");

		return a_AVPLeadSource;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  AVPLeadSource noun into database
	*@param the_AVPLeadSource
	*@return AVPLeadSourceobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_AVPLeadSource", httpMethod = "PUT",notes = "updates a noun of AVPLeadSource",response = AVPLeadSource.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_AVPLeadSource" ,headers="Accept=application/json")
    @ResponseBody
	public AVPLeadSource update_AVPLeadSource(@RequestBody AVPLeadSource the_AVPLeadSource) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_AVPLeadSource controller started operation!");

		AVPLeadSource a_AVPLeadSource;

		a_AVPLeadSource = AVPLeadSource_Default_Activity_service.update_avpleadsource(the_AVPLeadSource, super.getUser());

		log.info("Object returned from update_AVPLeadSource method !");

		return a_AVPLeadSource;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  AVPLeadSource noun from  database based on given noun id
	*@param AVPLeadSource_id
	*@return AVPLeadSourceobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_AVPLeadSource/{AVPLeadSource_id}", httpMethod = "GET",notes = "updates a noun of AVPLeadSource",response = AVPLeadSource.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_AVPLeadSource/{AVPLeadSource_id}" ,headers="Accept=application/json")
    @ResponseBody
	public AVPLeadSource search_for_update_AVPLeadSource(@PathVariable("AVPLeadSource_id")long AVPLeadSource_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_AVPLeadSource controller started operation!");

		AVPLeadSource the_AVPLeadSource = new AVPLeadSource();

		the_AVPLeadSource = AVPLeadSource_Default_Activity_service.avpleadsource_search_for_update(AVPLeadSource_id, super.getUser());

		log.info("Object returned from search_for_update_AVPLeadSource method !");

		return the_AVPLeadSource;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  AVPLeadSource noun from  database based on given noun id
	*@param AVPLeadSource_id
	*@return AVPLeadSourceobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_AVPLeadSource/{AVPLeadSource_id}", httpMethod = "DELETE",notes = "deletes a noun of AVPLeadSource",response = AVPLeadSource.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_AVPLeadSource/{AVPLeadSource_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_AVPLeadSource(@PathVariable("AVPLeadSource_id")long AVPLeadSource_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_AVPLeadSource controller started operation!");

		String service_return_msg = "";

		service_return_msg = AVPLeadSource_Default_Activity_service.delete_avpleadsource(AVPLeadSource_id, super.getUser());

		log.info("Object returned from delete_AVPLeadSource method !");

		return service_return_msg;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  AVPLeadSource noun from  database
	*
	*@return List of AVPLeadSource objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_AVPLeadSource", httpMethod = "GET",notes = "special search that gets all values of AVPLeadSource",response = AVPLeadSource.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_AVPLeadSource" ,headers="Accept=application/json")
    @ResponseBody
	public List<AVPLeadSource> get_all_AVPLeadSource() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_AVPLeadSource controller started operation!");

		List<AVPLeadSource> AVPLeadSource_list = new ArrayList<AVPLeadSource>();

		AVPLeadSource_list = AVPLeadSource_Default_Activity_service.get_all_avpleadsource();

		log.info("Object returned from get_all_AVPLeadSource method !");

		return AVPLeadSource_list;


	}




}