package com.ibm.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.ibm.domain.core.ARole;

import com.ibm.config.IBMSalesForecastSwaggerUIConstants;

import com.ibm.service.ARole_Default_ActivityService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/ARole_Default_Activity", description = "ARole_Default_Activity of ARole_Default_Activity",produces = "application/json")
@CrossOrigin
@Controller("ARole_Default_ActivityController")
@RequestMapping("/ARole_Default_Activity")
public class ARole_Default_ActivityController  extends IBBaseController implements IBMSalesForecastSwaggerUIConstants {

private static Logger log = Logger.getLogger(ARole_Default_ActivityController.class.getName());

	private ARole_Default_ActivityService ARole_Default_Activity_service;


	public ARole_Default_ActivityService get_ARole_Default_Activity_service() {
		return ARole_Default_Activity_service;
	}


	@Resource(name="ARole_Default_ActivityService")
	public void set_ARole_Default_Activity_service(ARole_Default_ActivityService ARole_Default_Activity_service) {
		this.ARole_Default_Activity_service = ARole_Default_Activity_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  ARole noun into database
	* @param the_ARole
	*@return ARole object will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_ARole", httpMethod = "POST",notes = "creates a noun of ARole",response = ARole.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_ARole" ,headers="Accept=application/json")
    @ResponseBody
	public ARole create_ARole(@RequestBody ARole the_ARole) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_ARole controller started operation!");

		ARole a_ARole;

		a_ARole = ARole_Default_Activity_service.create_arole(the_ARole, super.getUser());

		log.info("Object returned from create_ARole method !");

		return a_ARole;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  ARole noun into database
	*@param the_ARole
	*@return ARoleobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_ARole", httpMethod = "PUT",notes = "updates a noun of ARole",response = ARole.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_ARole" ,headers="Accept=application/json")
    @ResponseBody
	public ARole update_ARole(@RequestBody ARole the_ARole) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_ARole controller started operation!");

		ARole a_ARole;

		a_ARole = ARole_Default_Activity_service.update_arole(the_ARole, super.getUser());

		log.info("Object returned from update_ARole method !");

		return a_ARole;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  ARole noun from  database based on given noun id
	*@param ARole_id
	*@return ARoleobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_ARole/{ARole_id}", httpMethod = "GET",notes = "updates a noun of ARole",response = ARole.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_ARole/{ARole_id}" ,headers="Accept=application/json")
    @ResponseBody
	public ARole search_for_update_ARole(@PathVariable("ARole_id")long ARole_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_ARole controller started operation!");

		ARole the_ARole = new ARole();

		the_ARole = ARole_Default_Activity_service.arole_search_for_update(ARole_id, super.getUser());

		log.info("Object returned from search_for_update_ARole method !");

		return the_ARole;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  ARole noun from  database based on given noun id
	*@param ARole_id
	*@return ARoleobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_ARole/{ARole_id}", httpMethod = "DELETE",notes = "deletes a noun of ARole",response = ARole.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_ARole/{ARole_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_ARole(@PathVariable("ARole_id")long ARole_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_ARole controller started operation!");

		String service_return_msg = "";

		service_return_msg = ARole_Default_Activity_service.delete_arole(ARole_id, super.getUser());

		log.info("Object returned from delete_ARole method !");

		return service_return_msg;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  ARole noun from  database
	*
	*@return List of ARole objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_ARole", httpMethod = "GET",notes = "special search that gets all values of ARole",response = ARole.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_ARole" ,headers="Accept=application/json")
    @ResponseBody
	public List<ARole> get_all_ARole() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_ARole controller started operation!");

		List<ARole> ARole_list = new ArrayList<ARole>();

		ARole_list = ARole_Default_Activity_service.get_all_arole();

		log.info("Object returned from get_all_ARole method !");

		return ARole_list;


	}




}