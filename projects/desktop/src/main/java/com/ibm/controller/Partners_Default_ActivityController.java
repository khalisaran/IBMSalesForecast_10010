package com.ibm.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.ibm.domain.core.Partners;

import com.ibm.config.IBMSalesForecastSwaggerUIConstants;

import com.ibm.service.Partners_Default_ActivityService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/Partners_Default_Activity", description = "Partners_Default_Activity of Partners_Default_Activity",produces = "application/json")
@CrossOrigin
@Controller("Partners_Default_ActivityController")
@RequestMapping("/Partners_Default_Activity")
public class Partners_Default_ActivityController  extends IBBaseController implements IBMSalesForecastSwaggerUIConstants {

private static Logger log = Logger.getLogger(Partners_Default_ActivityController.class.getName());

	private Partners_Default_ActivityService Partners_Default_Activity_service;


	public Partners_Default_ActivityService get_Partners_Default_Activity_service() {
		return Partners_Default_Activity_service;
	}


	@Resource(name="Partners_Default_ActivityService")
	public void set_Partners_Default_Activity_service(Partners_Default_ActivityService Partners_Default_Activity_service) {
		this.Partners_Default_Activity_service = Partners_Default_Activity_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  Partners noun into database
	* @param the_Partners
	*@return Partners object will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_Partners", httpMethod = "POST",notes = "creates a noun of Partners",response = Partners.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_Partners" ,headers="Accept=application/json")
    @ResponseBody
	public Partners create_Partners(@RequestBody Partners the_Partners) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_Partners controller started operation!");

		Partners a_Partners;

		a_Partners = Partners_Default_Activity_service.create_partners(the_Partners, super.getUser());

		log.info("Object returned from create_Partners method !");

		return a_Partners;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  Partners noun into database
	*@param the_Partners
	*@return Partnersobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_Partners", httpMethod = "PUT",notes = "updates a noun of Partners",response = Partners.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_Partners" ,headers="Accept=application/json")
    @ResponseBody
	public Partners update_Partners(@RequestBody Partners the_Partners) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_Partners controller started operation!");

		Partners a_Partners;

		a_Partners = Partners_Default_Activity_service.update_partners(the_Partners, super.getUser());

		log.info("Object returned from update_Partners method !");

		return a_Partners;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  Partners noun from  database based on given noun id
	*@param Partners_id
	*@return Partnersobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_Partners/{Partners_id}", httpMethod = "GET",notes = "updates a noun of Partners",response = Partners.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_Partners/{Partners_id}" ,headers="Accept=application/json")
    @ResponseBody
	public Partners search_for_update_Partners(@PathVariable("Partners_id")long Partners_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_Partners controller started operation!");

		Partners the_Partners = new Partners();

		the_Partners = Partners_Default_Activity_service.partners_search_for_update(Partners_id, super.getUser());

		log.info("Object returned from search_for_update_Partners method !");

		return the_Partners;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  Partners noun from  database based on given noun id
	*@param Partners_id
	*@return Partnersobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_Partners/{Partners_id}", httpMethod = "DELETE",notes = "deletes a noun of Partners",response = Partners.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_Partners/{Partners_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_Partners(@PathVariable("Partners_id")long Partners_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_Partners controller started operation!");

		String service_return_msg = "";

		service_return_msg = Partners_Default_Activity_service.delete_partners(Partners_id, super.getUser());

		log.info("Object returned from delete_Partners method !");

		return service_return_msg;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  Partners noun from  database
	*
	*@return List of Partners objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_Partners", httpMethod = "GET",notes = "special search that gets all values of Partners",response = Partners.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = IBMSalesForecastSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = IBMSalesForecastSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = IBMSalesForecastSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = IBMSalesForecastSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = IBMSalesForecastSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_Partners" ,headers="Accept=application/json")
    @ResponseBody
	public List<Partners> get_all_Partners() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_Partners controller started operation!");

		List<Partners> Partners_list = new ArrayList<Partners>();

		Partners_list = Partners_Default_Activity_service.get_all_partners();

		log.info("Object returned from get_all_Partners method !");

		return Partners_list;


	}




}