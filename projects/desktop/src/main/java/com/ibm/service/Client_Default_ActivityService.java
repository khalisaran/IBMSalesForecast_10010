package com.ibm.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.ibm.domain.core.Client;

import com.ibm.dao.mysql.Client_Default_ActivityDao;

import com.ibm.domain.core.IBUser;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("Client_Default_ActivityService")
public class Client_Default_ActivityService extends IBBaseService  {
private static Logger log = Logger.getLogger(Client_Default_ActivityService.class.getName());

	private Client_Default_ActivityDao Client_Default_Activity_dao;


	public Client_Default_ActivityDao get_Client_Default_Activity_dao() {
		return Client_Default_Activity_dao;
	}


	@Resource(name="Client_Default_ActivityDao")
	public void set_Client_Default_Activity_dao(Client_Default_ActivityDao Client_Default_Activity_dao) {
		this.Client_Default_Activity_dao = Client_Default_Activity_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  Client noun into database
	*@param Client
	*@param user
	*@return the_Client object will return
	*@throws Exception
	*/

	public Client create_client(Client Client, IBUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_client service operation started !");

		try{
			Client the_Client;

			the_Client = Client_Default_Activity_dao.create_client(Client, user);

 			log.info(" Object returned from create_client  service method !");
			return the_Client;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_client service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  Client noun into database
	*@param Client
	*@param user
	*@return the_Client object will return
	*@throws Exception
	*/

	public Client update_client(Client Client, IBUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_client service operation started !");

		try{
			Client the_Client;

			the_Client = Client_Default_Activity_dao.update_client(Client, user);

 			log.info(" Object returned from update_client  service method !");
			return the_Client;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_client service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  Client noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Client object will return
	*@throws Exception
	*/

	public Client client_search_for_update(long id, IBUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("client_search_for_update service operation started !");

		try{
			Client the_Client;

			the_Client = Client_Default_Activity_dao.client_search_for_update(id, user);

 			log.info(" Object returned from client_search_for_update  service method !");
			return the_Client;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("client_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  Client noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Client id deleted based on id
	*@throws Exception
	*/

	public String  delete_client(long id, IBUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_client service operation started !");

		try{
			String method_return_message;

			method_return_message = Client_Default_Activity_dao.delete_client(id, user);

 			log.info(" Object returned from delete_client  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_client service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  Client noun from  database
	*
	*
	*@return List of Client object will return
	*@throws Exception
	*/

	public ArrayList<Client> get_all_client() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<Client> Client_list;

			Client_list = Client_Default_Activity_dao.get_all_client();

 			log.info(" Object returned from   service method !");
			return Client_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  Client noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Client object will return
	*@throws Exception
	*/

	public Client client_search_for_detail(long id, IBUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("client_search_for_detail service operation started !");

		try{
			Client the_Client;

			the_Client = Client_Default_Activity_dao.client_search_for_update(id, user);

 			log.info(" Object returned from client_search_for_detail  service method !");
			return the_Client;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("client_search_for_detail service throws exception : "+ e.toString());

		}
		return null;



	}




}