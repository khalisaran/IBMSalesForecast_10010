package com.ibm.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.ibm.domain.core.Offering;

import com.ibm.dao.mysql.Offering_Default_ActivityDao;

import com.ibm.domain.core.IBUser;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("Offering_Default_ActivityService")
public class Offering_Default_ActivityService extends IBBaseService  {
private static Logger log = Logger.getLogger(Offering_Default_ActivityService.class.getName());

	private Offering_Default_ActivityDao Offering_Default_Activity_dao;


	public Offering_Default_ActivityDao get_Offering_Default_Activity_dao() {
		return Offering_Default_Activity_dao;
	}


	@Resource(name="Offering_Default_ActivityDao")
	public void set_Offering_Default_Activity_dao(Offering_Default_ActivityDao Offering_Default_Activity_dao) {
		this.Offering_Default_Activity_dao = Offering_Default_Activity_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  Offering noun into database
	*@param Offering
	*@param user
	*@return the_Offering object will return
	*@throws Exception
	*/

	public Offering create_offering(Offering Offering, IBUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_offering service operation started !");

		try{
			Offering the_Offering;

			the_Offering = Offering_Default_Activity_dao.create_offering(Offering, user);

 			log.info(" Object returned from create_offering  service method !");
			return the_Offering;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_offering service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  Offering noun into database
	*@param Offering
	*@param user
	*@return the_Offering object will return
	*@throws Exception
	*/

	public Offering update_offering(Offering Offering, IBUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_offering service operation started !");

		try{
			Offering the_Offering;

			the_Offering = Offering_Default_Activity_dao.update_offering(Offering, user);

 			log.info(" Object returned from update_offering  service method !");
			return the_Offering;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_offering service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  Offering noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Offering object will return
	*@throws Exception
	*/

	public Offering offering_search_for_update(long id, IBUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("offering_search_for_update service operation started !");

		try{
			Offering the_Offering;

			the_Offering = Offering_Default_Activity_dao.offering_search_for_update(id, user);

 			log.info(" Object returned from offering_search_for_update  service method !");
			return the_Offering;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("offering_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  Offering noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Offering id deleted based on id
	*@throws Exception
	*/

	public String  delete_offering(long id, IBUser user) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_offering service operation started !");

		try{
			String method_return_message;

			method_return_message = Offering_Default_Activity_dao.delete_offering(id, user);

 			log.info(" Object returned from delete_offering  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_offering service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  Offering noun from  database
	*
	*
	*@return List of Offering object will return
	*@throws Exception
	*/

	public ArrayList<Offering> get_all_offering() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<Offering> Offering_list;

			Offering_list = Offering_Default_Activity_dao.get_all_offering();

 			log.info(" Object returned from   service method !");
			return Offering_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}